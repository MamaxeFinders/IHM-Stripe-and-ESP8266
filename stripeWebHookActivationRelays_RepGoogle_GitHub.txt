// from https://techtutorialsx.com/2017/03/26/esp8266-webserver-accessing-the-body-of-a-http-request/

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h> //https://arduinojson.org/?utm_source=meta&utm_medium=library.properties

#define ARDUINOJSON_DEFAULT_NESTING_LIMIT 20
static StaticJsonDocument<2500> jsonDocument;

//DEFINE ALL RELAYS CHANNELS
const byte rel1ON[] = {0xA0, 0x01, 0x01, 0xA2};  //Hex command to send to serial for open relay
const byte rel1OFF[] = {0xA0, 0x01, 0x00, 0xA1}; //Hex command to send to serial for close relay
const byte rel2ON[] = {0xA0, 0x02, 0x01, 0xA3};  //Hex command to send to serial for open relay
const byte rel2OFF[] = {0xA0, 0x02, 0x00, 0xA2}; //Hex command to send to serial for close relay
const byte rel3ON[] = {0xA0, 0x03, 0x01, 0xA4};  //Hex command to send to serial for open relay
const byte rel3OFF[] = {0xA0, 0x03, 0x00, 0xA3}; //Hex command to send to serial for close relay
const byte rel4ON[] = {0xA0, 0x04, 0x01, 0xA5};  //Hex command to send to serial for open relay
const byte rel4OFF[] = {0xA0, 0x04, 0x00, 0xA4}; //Hex command to send to serial for close relay

int ActivePiste = 0;
int NombreDeSessions = 0;
String body;

unsigned long previousMillis = 0;
unsigned long interval = 30000; //PERIOD TO CHECK THE CONNECTION

ESP8266WebServer server(80); //ROUTER PORT

//WIFI SETTING
const char* ssid = "XXXXXX"; //WiFi router
const char* password = "XXXXX"; //WiFi pwd

void setup() {

  Serial.begin(115200); 
  WiFi.mode(WIFI_STA);
  WiFi.setSleepMode(WIFI_NONE_SLEEP);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Waiting to connect...");
  }
  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  server.on("/body", handleBody);
  server.begin(); //Start the server
  Serial.println("Server listening");

  Serial.write(rel1OFF, sizeof(rel1OFF));
  Serial.write(rel2OFF, sizeof(rel2OFF));
  Serial.write(rel3OFF, sizeof(rel3OFF));
  Serial.write(rel4OFF, sizeof(rel4OFF));
}

void loop() { // Boucle avec les commandes

  unsigned long currentMillis = millis();
  // if WiFi is down, try reconnecting
  if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >= interval)) {
    Serial.print(millis());
    Serial.println("Reconnecting to WiFi...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    previousMillis = currentMillis;
  }
  currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    switch (WiFi.status()) {
      case WL_NO_SSID_AVAIL:
        Serial.println("Configured SSID cannot be reached");
        break;
      case WL_CONNECTED:
        Serial.println("Connection successfully established");
        break;
      case WL_CONNECT_FAILED:
        Serial.println("Connection failed");
        break;
    }
    Serial.printf("Connection status: %d\n", WiFi.status());
    Serial.print("RRSI: ");
    Serial.println(WiFi.RSSI());
    previousMillis = currentMillis;
  }

  server.handleClient(); //LISTEN THE NETWORK

  for (int i = 1; i <= NombreDeSessions; i++) { //IF SESSION ACTIVATED FOR NEXT
    if (ActivePiste == 1) {
      Serial.write(rel1ON, sizeof(rel1ON));
      delay(1000);
      Serial.write(rel1OFF, sizeof(rel1OFF));
      delay(1000);
    } else if (ActivePiste == 2) {
      Serial.write(rel2ON, sizeof(rel2ON));
      delay(1000);
      Serial.write(rel2OFF, sizeof(rel2OFF));
      delay(1000);
    } else if (ActivePiste == 3) {
      Serial.write(rel3ON, sizeof(rel3ON));
      delay(1000);
      Serial.write(rel3OFF, sizeof(rel3OFF));
      delay(1000);
    } else if (ActivePiste == 4) {
      Serial.write(rel4ON, sizeof(rel4ON));
      delay(1000);
      Serial.write(rel4OFF, sizeof(rel4OFF));
      delay(1000);
    } else {
      //error message
    }
  }
  NombreDeSessions = 0;
  ActivePiste = 0;
}

void handleBody() { //Handler for the body path
  if (server.hasArg("plain") == false) { //Check if body received
    server.send(200, "text/plain", "Requette recue sans donnees");
    return;
  }
  body = server.arg("plain");

  deserializeJson(jsonDocument, body);
  // int DocSize = jsonDocument.size(); // Size of the webHook JSON is 9
  String PrixUneSession = jsonDocument["data"]["object"]["metadata"]["PrixUneSession"];
  String PrixDeuxSessions = jsonDocument["data"]["object"]["metadata"]["PrixDeuxSessions"];
  String piste = jsonDocument["data"]["object"]["metadata"]["Piste"]; //Read JSON in the Body
  String credit = jsonDocument["data"]["object"]["amount_total"];
  String TransactionID = jsonDocument["id"];

  if (credit == PrixUneSession) {
    NombreDeSessions = 1;
  } else {
    NombreDeSessions = 2;
  }
  ActivePiste = piste.toInt();

  Serial.println("PISTE : " + piste);
  Serial.println("CREDIT : " + credit);
  Serial.println("PRIX UNE SESSION : " + PrixUneSession);
  Serial.println("PRIX DEUX SESSIONS : " + PrixDeuxSessions);
  Serial.println("NOMMBRE DE SESSIONS : " + NombreDeSessions);

  server.send(200, "text/plain", "Succes : =>" + TransactionID + "<= Piste " + piste + " activee pour " + credit + " euros et " + NombreDeSessions + " sessions");
}
